{
  "hash": "269f35fe256cee406c405e2aafae81c3",
  "result": {
    "markdown": "---\ntitle: \"Transformação BOX COX\"\nauthor: \"Yuri\"\n---\n\n\n##### \"Dados utilizados: aula10.qmd\"\n\n### Transformação de Dados Box Cox (BC)\n\n¹ Na análise de variância, pressupomos que os dados sejam homocedasticos (Os tratamentos apresentam a mesma variabilidade).\n\n² Quando a pressuposição do texto ¹ não é atendida, necessitamos transformar os dados.\n\n³ O BC é um recurso matemático que utilizamos para validade o modelo de ANOVA.\n\nB.C (Desenvolvimento)\n\nGeorge Box e David Cox, estatísticos renomados, conceberam um método revolucionário para encontrar o expoente perfeito (Lambda = 1) a fim de moldar os dados em uma distribuição \"normalizada\". Quando Lambda assume o valor de 1, nenhuma alteração é necessária, uma vez que os resultados são idênticos aos originais. Essencialmente, o valor de Lambda indica a potência à qual todos os dados devem ser elevados. Para alcançar isso, a técnica de transformação de potência Box-Cox explora uma faixa de valores de Lambda de -5 a +5, em busca do valor ideal. Apresentamos abaixo uma tabela com algumas transformações Box-Cox comumente utilizadas, onde Y' representa a transformação dos dados originais Y. É importante notar que, para Lambda igual a 0, a transformação NÃO é Y\\^0 (pois isso resultaria em 1 para cada valor), mas sim o logaritmo de Y.\n\nNo pacote MASS, é possível encontrar a função boxcox, que desempenha um papel importante na transformação da variável resposta. Essa transformação é realizada por meio da fórmula \"variável resposta \\^ lambda - 1\", em que lambda (λ) é o valor utilizado.\n\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-1_1293e9d161c269cd73e203c4c1503faf'}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nmicelial <- read_excel(\"dados-diversos.xlsx\", \"fungicida_vaso\")\nmicelial <- micelial |> \n  mutate(inc = inf_seeds/n_seeds*100,\n         rank_inc = rank(inc))\nrank_anova <- aov(rank_inc ~ treat*dose, data = micelial)\nsummary(rank_anova)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df Sum Sq Mean Sq F value  Pr(>F)   \ntreat        1 220.00  220.00  14.204 0.00168 **\ndose         1 105.34  105.34   6.801 0.01904 * \ntreat:dose   1  80.34   80.34   5.187 0.03684 * \nResiduals   16 247.82   15.49                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-2_268cfe7fd5c54dbb917aff3cbe85ffa5'}\n\n```{.r .cell-code}\nlibrary(emmeans)\nmeans_rank <- emmeans(rank_anova, ~ treat | dose)\nlibrary(multcomp)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: mvtnorm\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: survival\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: TH.data\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: MASS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MASS'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'TH.data'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:MASS':\n\n    geyser\n```\n:::\n\n```{.r .cell-code}\nlibrary(multcompView)\ncld(means_rank)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndose = 0.5:\n treat        emmean   SE df lower.CL upper.CL .group\n Tebuconazole   6.90 1.76 16     3.17     10.6  1    \n Ionic liquid  18.00 1.76 16    14.27     21.7   2   \n\ndose = 2.0:\n treat        emmean   SE df lower.CL upper.CL .group\n Tebuconazole   6.75 1.97 16     2.58     10.9  1    \n Ionic liquid   9.75 1.61 16     6.34     13.2  1    \n\nConfidence level used: 0.95 \nsignificance level used: alpha = 0.05 \nNOTE: If two or more means share the same grouping symbol,\n      then we cannot show them to be different.\n      But we also did not show them to be the same. \n```\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-3_c251149dc3026ffcd91e8a7a95472e2b'}\n\n```{.r .cell-code}\nlibrary(MASS)\n\ninsects <- tibble::as_tibble(InsectSprays)|> \n  dplyr::select(spray, count)\ninsects\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 72 × 2\n   spray count\n   <fct> <dbl>\n 1 A        10\n 2 A         7\n 3 A        20\n 4 A        14\n 5 A        14\n 6 A        12\n 7 A        10\n 8 A        23\n 9 A        17\n10 A        20\n# ℹ 62 more rows\n```\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-4_f6ebf3817acbd601f248b16cbb304b18'}\n\n```{.r .cell-code}\nb <- boxcox(lm(insects$count+0.1 ~ 1)) # o valor \n```\n\n::: {.cell-output-display}\n![](aula18_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-5_736c779029f356296094afaf14f9e5a1'}\n\n```{.r .cell-code}\nlambda <- b$x[which.max(b$y)]\nlambda\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.4242424\n```\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-6_bdca926d4f514c35c73481ae9889bd37'}\n\n```{.r .cell-code}\ninsects$count2 <- (insects$count ^ lambda - 1) / lambda \ninsects$count2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  3.903635  3.024469  6.043993  4.864268  4.864268  4.407118  3.903635\n [8]  6.557185  5.484274  6.043993  4.864268  4.640760  4.161975  5.484274\n[15]  6.219699  4.161975  5.285168  4.864268  5.484274  5.484274  5.863153\n[22]  6.219699  3.024469  4.640760 -2.357143  0.000000  3.024469  0.805831\n[29]  1.399509  0.000000  0.805831  0.000000  1.399509 -2.357143  0.000000\n[36]  1.887150  1.399509  2.308577  4.407118  2.683787  1.887150  1.399509\n[43]  2.308577  2.308577  2.308577  2.308577  0.805831  1.887150  1.399509\n[50]  2.308577  1.399509  2.308577  1.399509  2.683787  0.000000  0.000000\n[57]  1.399509  0.805831  2.683787  1.887150  4.161975  3.629951  5.078760\n[64]  6.390651  5.078760  5.285168  4.640760  3.903635  7.033117  7.033117\n[71]  6.719601  4.640760\n```\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-7_3c98f449301477fa35cc0ff444d11744'}\n\n```{.r .cell-code}\nhist(insects$count)\n```\n\n::: {.cell-output-display}\n![](aula18_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='aula18_cache/html/unnamed-chunk-8_775d9fa2a59c32d13c8ab16f7213616e'}\n\n```{.r .cell-code}\nhist(insects$count2)\n```\n\n::: {.cell-output-display}\n![](aula18_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}